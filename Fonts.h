uint8_t pageTable[8][1] = {0};      // May be bad, keeps track of the length of words in each page
// Could also read display data. Keep reading until the last column that has more than a total value of 0 in it. - more cpu intensive. Array is memory intensive

// Currently holds all 8 Width characters. 
// An array with varying width characters would be hard to keep track of unless we
// pair it with an array with every chars address
byte fontArray[1][302] =
{ 11111100,
  11111110,
  00110111,
  00110011,
  00110011,
  00110111,
  11111110,
  11111100,
  11111111,
  11111111,
  11011011,
  11011011,
  11011011,
  11011011,
  11111111,
  01100110,
  00111100,
  01111110,
  11100111,
  11000011,
  11000011,
  11000011,
  11100111,
  01100110,
  11111111,
  11111111,
  11000011,
  11000011,
  11000011,
  11100111,
  11111111,
  01111110,
  11111111,
  11111111,
  11011011,
  11011011,
  11011011,
  11011011,
  11000011,
  11000011,
  11111111,
  11111111,
  00011011,
  00011011,
  00011011,
  00011011,
  00000011,
  00000011,
  00111100,
  01111110,
  11100111,
  11000011,
  11000011,
  11010011,
  11110111,
  11110110,
  11111111,
  11111111,
  00011000,
  00011000,
  00011000,
  00011000,
  11111111,
  11111111,
  01110000,
  11110000,
  11000000,
  11000000,
  11000000,
  11000000,
  11111111,
  01111111,
  11111111,
  11111111,
  00011000,
  00111100,
  01111110,
  11100111,
  11000011,
  11000011,
  11111111,
  11111111,
  11000000,
  11000000,
  11000000,
  11000000,
  11000000,
  11000000,
  11111111,
  11111111,
  00001110,
  00011100,
  00011100,
  00001110,
  11111111,
  11111111,
  11111111,
  11111111,
  00001110,
  00011100,
  00111000,
  01110000,
  11111111,
  11111111,
  01111110,
  11111111,
  11000011,
  11000011,
  11000011,
  11000011,
  11111111,
  01111110,
  11111111,
  11111111,
  00110011,
  00110011,
  00110011,
  00110011,
  00011111,
  00001110,
  01111110,
  11111111,
  11000011,
  11010011,
  11110011,
  01100011,
  11111111,
  11011110,
  11111111,
  11111111,
  00110011,
  00110011,
  01110011,
  11110011,
  11011111,
  10001110,
  11001110,
  11011111,
  11011011,
  11011011,
  11011011,
  11011011,
  11111011,
  01110011,
  00000011,
  00000011,
  00000011,
  11111111,
  11111111,
  00000011,
  00000011,
  00000011,
  01111111,
  11111111,
  11000000,
  11000000,
  11000000,
  11000000,
  11111111,
  01111111,
  00001111,
  00111111,
  01110000,
  11000000,
  11000000,
  01110000,
  00111111,
  00001111,
  11111111,
  11111111,
  01110000,
  00111000,
  00111000,
  01110000,
  11111111,
  11111111,
  11000011,
  11100111,
  01111110,
  00111100,
  00111100,
  01111110,
  11100111,
  11000011,
  00000011,
  00000111,
  00001110,
  11111100,
  11111100,
  00001110,
  00000111,
  00000011,
  11000011,
  11100011,
  11110011,
  11111011,
  11011111,
  11001111,
  11000111,
  11000011,
  01111110,
  11111111,
  11100011,
  11010011,
  11001011,
  11000111,
  11111111,
  01111110,
  11111011,
  11111011,
  11011011,
  11011011,
  11011011,
  11011011,
  11011111,
  11001110,
  11000011,
  11011011,
  11011011,
  11011011,
  11011011,
  11011011,
  11111111,
  01111110,
  00001111,
  00011111,
  00011000,
  00011000,
  00011000,
  00011000,
  11111111,
  11111111,
  11001111,
  11011111,
  11011011,
  11011011,
  11011011,
  11011011,
  11111011,
  01111011,
  01111110,
  11111111,
  11011011,
  11011011,
  11011011,
  11011011,
  11111011,
  01110011,
  00000011,
  00000011,
  00000011,
  00000011,
  11110011,
  11111111,
  00011111,
  00000111,
  01110110,
  11111111,
  11011011,
  11011011,
  11011011,
  11011011,
  11111111,
  01110110,
  00011110,
  11011111,
  11011011,
  11011011,
  11011011,
  11111011,
  01111111,
  00111110,
  11111111,
  11111111,
  10000001,
  10000001,
  10000001,
  10000001,
  11111111,
  11111111
}
